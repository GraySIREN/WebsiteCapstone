<style>
    body {
        font-family: 'Montserrat', sans-serif;
        padding: 20px;
        font-weight: 500;
        color: black;
        text-align: center;
    }

    p {
        text-align: center;
    }

    form {
        max-width: 400px;
        margin: 0 auto; /* Center the form horizontally */
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    label {
        display: block;
        margin-bottom: 10px;
    }

    input {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        background-color: #4caf50;
        color: #fff;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #45a049;
        }
</style>


<body>

    <div>
        <p>
            Sign up to receive the latest updates!
        </p>
    </div>

    @*Very simple form structure*@
    <form>
        <label>Name <input name="name" type="text" /></label>
        <label>Email <input name="email" type="email" required placeholder="me@example.com" /></label>
        <button type="submit">Sign Up!</button>
    </form>

    @*Playing with AI Image generator*@
    <canvas id="myCanvas" width="300" height="300" style="border:1px solid #000000; margin-top: 65px;"></canvas>
</body>

<script>

    async function generateImage(input) {
        // Load the MobileNet model
        const model = await tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json');

        // Preprocess the input
        const inputTensor = tf.browser.fromPixels(input).resizeNearestNeighbor([224, 224]).toFloat();

        // Normalize the input
        const offset = tf.scalar(127.5);
        const normalized = inputTensor.sub(offset).div(offset);

        // Generate the AI image
        const predictions = await model.predict(normalized).data();
        console.log('Predictions: ', predictions);

        // TODO: Implement the logic to generate the AI image based on the predictions
    }
    document.getElementById('play-again').addEventListener('click', function () {
        // Call the generateImage function with the appropriate image data
        generateImage(/* Pass the image data here */);
    });
    function drawImage(image) {
        var canvas = document.getElementById('myCanvas');
        var ctx = canvas.getContext('2d');

        // Draw the image onto the canvas
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
    }
</script>