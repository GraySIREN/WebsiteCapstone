<style>
    body {
        font-family: 'Montserrat', sans-serif;
        margin: 0;
        padding: 0;
        background: linear-gradient(to top right, #06554c, #627461);
        height: auto;
        transform: scale(0.9);
    }

    #game-container {
        text-align: center;
        margin-top: 50px;
        margin-right: 0;
        margin-left: 0;
    }

    #player-hand, #dealer-hand {
        margin-bottom: 20px;
    }

    #buttons button {
        margin: 0 10px;
    }

    #message {
        font-weight: bold;
    }
@* *************************************************************************** *@
@* *************************************************************************** *@
@* Standard Card Size: 2.5'x3.5'  : 240px x 336px   *@

    .row-container-1 {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .row-container-2 {
        display: flex;
        justify-content: left;
        align-items: center;
        margin-top: 20px;
    }

    #game-updates {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-right: 50px;
        margin-top: 20px;
        border: solid 4px #133337;
        border-radius: 25px;
        padding: 25px;
        color: black;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        background: linear-gradient(to top right, #468499, #cb7554); /*How to add gradient element*/
        height: auto; /* Make sure the gradient covers the entire viewport height */
    }

    /* Style for the card container */
    .card-container {
        margin: 0;
        display: flex; /* Use flexbox to create a row */
        justify-content: space-around; /* Distribute space evenly between cards */
        flex-wrap: wrap; /* Allow cards to wrap to the next row if necessary */
        max-width: 1750px;
        margin: 0 auto; /* Center the container */
    }

    /* Style for each individual card */
    .card {
        position: relative;
        margin: 0;
        margin-bottom: 35px;
        height: 336px;
        width: 240px;
        padding: 15px;
        border: 1px solid #133337;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.1s ease-in-out, box-shadow 0.1s;
        animation: ease-in-out;
        background: center;
        background-size: cover;
        color: black;
        z-index: 1; /* Ensure text is above the background image */
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
    }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 12px;
            background: inherit; /* Inherit the background image from the card */
            filter: blur(0px);
            transition: filter 0.1s ease-in-out;
            z-index: -1; /* Move pseudo-element behind text */
            content: '';
            display: block;
        }

        .card:hover::before {
            filter: blur(5px); /* Apply blur effect on hover */
        }

        .card:hover {
            transform: translateY(-0.5rem) scale(1.0125);
            box-shadow: 0 0.5em 3rem -1rem rgba(0, 0, 0, 0.5);
        }

        .deck-card {
            justify-content: center;
            padding: 10px;
            border-radius: 12px;
            margin: 0 auto;
        }

    .stats-container {
        display: grid;
        justify-content: center;
        padding: 20px;
        margin-bottom: 20px;
        gap: 10px;
        width: 500px;
        height: 350px auto;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        background: url('https://i.imgur.com/nSKvmRR.jpg') center;
        position: relative; /* Needed for z-index to work properly */
        color: #ffffff;
    }

    .grid-item {
        text-align: center; /* Center text horizontally */
        align-items: center; /* Center text vertically */
        width: 100%;
        background-color: #468499;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        color: #ffffff;
    }

        .grid-item:hover {
            transform: scale(1.03); /* Increase size on hover */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Add drop shadow on hover */
            color: #6bbd67;
            font-size: 1.05em; /* Increase text size on hover */
        }


    .grid-item-1 {
        justify-content: space-around;
        grid-row: 1/12;
        grid-column: 1/12;
        gap: 10px;
        width: 100%;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .grid-item-2 {
        justify-content: space-around;
        grid-row: 1/12;
        grid-column: 12/24;
        gap: 10px;
        width: 100%;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .grid-item-3 {
        justify-content: space-around;
        grid-row: 13/18;
        grid-column: 1/8;
        gap: 10px;
        width: 100%;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .grid-item-4 {
        justify-content: space-around;
        grid-row: 19/24;
        grid-column: 1/8;
        gap: 10px;
        width: 100%;
        border: 2px solid #133337;
        border-radius: 25px;
        color: #fff;
        padding: 20px;
        margin: 0 auto;
    }

        .grid-item-4 button {
            margin-top: 20px;
            padding: 10px 15px; /* Add padding to the button */
            background-color: #6bbd67; /* Set background color for the button */
            color: #fff; /* Set text color for the button */
            border: none; /* Remove border from the button */
            border-radius: 5px; /* Optional: Add border-radius for rounded corners */
            cursor: pointer; /* Change cursor to pointer on hover */
        }

            /* Hover effect for the submit button */
            .grid-item-4 button:hover {
                background-color: #4e8f4e; /* Change background color on hover */
            }
    /**/
    .grid-item-5 {
        justify-content: space-around;
        grid-row: 13/18;
        grid-column: 17/24;
        gap: 10px;
        width: 100%;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .grid-item-6 {
        justify-content: space-around;
        grid-row: 19/24;
        grid-column: 17/24;
        gap: 10px;
        width: 100%;
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .grid-item-7 {
        justify-content: space-around;
        grid-row: 13/24;
        grid-column: 9/16;
        gap: 10px;
        border: solid 2px #133337;
        border-radius: 25px;
        padding: 20px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0.1, 0.1, 0.1, 0.1);
    }

    #buttons {
        text-align: center; /* Center text horizontally */
        align-items: center; /* Center text vertically */
        width: 350px auto;
        margin-top: 20px;
        background-color: #468499; /*Hit and Stand Button Container Background*/
        border: 2px solid #133337;
        border-radius: 25px;
        padding: 20px;
        margin-bottom: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        color: #ffffff;
    }

        #buttons button {
            cursor: pointer;
            width: 100px;
            height: 50px;
            margin: 0 5px;
            padding: 5px;
            gap: 10px;
            background-color: #93c47d; /*Hit and Stand Button Color*/
            color: #fff;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            #buttons button:hover {
                transform: scale(1.1);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
                background-color: slategray;
            }

            #buttons button.clicked {
                transform: scale(1.6);
            }

</style>



@* *************************************************************************** *@

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blackjack</title>
    <link rel="stylesheet" href="site.css">
</head>
<body>
    <div id="game-container">
        <div class="card-container">
            <!-- Display player's hand -->
            <div id="player-hand"></div>

            <!-- Card 1 -->
            <div class="card" id="#playerCard1" @*style="background-image: url('https://i.imgur.com/j4ebqJG.png');"*@>
                <h2></h2>
                <p></p>
            </div>

            <!-- Card 2 -->
            <div class="card" id="#playerCard2" @*style="background-image: url('https://i.imgur.com/SrTxfYE.png'); margin-right: 25px;"*@>
                <h2></h2>
                <p></p>
            </div>

            <!-- Display dealer's hand -->
            <div id="dealer-hand"></div>

            <!-- Card 3 -->
            <div class="card" id="dealerCard1" @*style="background-image: url('https://i.imgur.com/WVou0eM.png');"*@>
                <h2></h2>
                <p></p>
            </div>

            <!-- Card 4 -->
            <div class="card" id="dealerCard2" style="resize: inherit; background-image: url('');">
                <h2></h2>
                <p></p>
            </div>
        </div>
    </div>

    <div class="row-container-1">
        <!-- Additional Cards Container -->
        <div class="card" style="border: solid 6px #133337; border-radius: 25px; resize: both; width: 120px; height: 168px; padding: 10px; margin-right: 10px;"></div>
        <div class="card" style="border: solid 6px #133337; border-radius: 25px; resize: both; width: 120px; height: 168px; padding: 10px; margin-right: 10px;"></div>
        <div class="card" style="border: solid 6px #133337; border-radius: 25px; resize: both; width: 120px; height: 168px; padding: 10px; margin-right: 10px;"></div>
        <div class="card" style="border: solid 6px #133337; border-radius: 25px; resize: both; width: 120px; height: 168px; padding: 10px; margin-right: 10px;"></div>
        <div class="card" style="border: solid 6px #133337; border-radius: 25px; resize: both; width: 120px; height: 168px; padding: 10px;"></div>

        <!-- Game Stats Container -->
        <div class="stats-container">
            <div class="grid-item grid-item-1">Player Hand Total: <span id="playerTotal"></span></div>
            <div class="grid-item grid-item-2">Dealer Hand Total: <span id="dealerTotal"></span></div>
            <div class="grid-item grid-item-3">Bankroll: <span id="bankroll"></span></div>
            <div class="grid-item grid-item-4">
                Bet Amount:
                <select id="betAmountDropdown" onchange="updateBetAmount()">
                    <option value="5">$5</option>
                    <option value="10">$10</option>
                    <option value="15">$15</option>
                    <option value="20">$20</option>
                    <option value="25">$25</option>
                    <option value="30">$30</option>
                    <option value="35">$35</option>
                    <option value="40">$40</option>
                    <option value="45">$45</option>
                    <option value="50">$50</option>
                    <option value="55">$55</option>
                    <option value="60">$60</option>
                    <option value="65">$65</option>
                    <option value="70">$70</option>
                    <option value="75">$75</option>
                    <option value="80">$80</option>
                    <option value="85">$85</option>
                    <option value="90">$90</option>
                    <option value="95">$95</option>
                    <option value="100">$100</option>
                </select>
                <button onclick="submitBet()">Submit</button>
            </div>
            <div class="grid-item grid-item-5">Total Winnings: <span id="totalWins"></span></div>
            <div class="grid-item grid-item-6">Total Loss: <span id="totalLosses"></span></div>
            <div class="grid item grid-item-7 card deck-card" style="background-image: url(''); resize: both; height: 210px; width: 150px;">Deck<span poster="deck"></span></div>
        </div>
    </div>

    <div class="row-container-2">
        <!-- Display messages -->
        <div id="game-updates"></div>

        <!-- Action buttons -->
        <div id="buttons">
            <button id="hit-button">Hit</button>
            <button id="stand-button">Stand</button>
            <button id="play-again">Play</button>
        </div>
    </div>

    <!--Reference to the file that will hold the script code for the converted C# game file-->
    <script src="game.js"></script>
    <style scr="BlackJack.cshtml"></!--style>
</body>
</html>


@* *************************************************************************** *@
@* *************************************************************************** *@
@*
    C# Code for BJG


    using System;
    {
        Console.ForegroundColor = ConsoleColor.White;
        Deck deck = new();

        deck.Shuffle(new Random());

        List<Card> playerHand = new();
        List<Card> dealerHand = new();

        Console.WriteLine("Hello, what is your name?");
        string playerName = Console.ReadLine();
        Console.WriteLine("Welcome to Blackjack!");

        // Not dealing with Hard or Soft 17, Splitting, int-Downs, etc.
        //******************************************************************************

        bool readyToPlay = PromptUserForDecision(playerName);

        if (readyToPlay)
        {
            Console.WriteLine("Let's play BlackJack!");
        }
        else
        {
            Console.WriteLine("Maybe next time. Goodbye!");
            return;
        }

        static bool PromptUserForDecision(string playerName)
        {
            Console.WriteLine($"Are you ready to play?");
            Console.WriteLine("[Y] To Play.");
            Console.WriteLine("[N] To Exit.");

            while (true)
            {
                ConsoleKeyInfo keyInfo = Console.ReadKey(intercept: true);
                char keyChar = char.ToUpper(keyInfo.KeyChar);

                if (keyChar == 'Y')
                {
                    Console.WriteLine();
                    return true;

                }
                else if (keyChar == 'N')
                {
                    Console.WriteLine();
                    return false;

                }
                else
                {
                    Console.WriteLine("\nInvalid input. Please press [Y] to play or [N] to exit.");
                }
            }
        }

        //******************************************************************************
        // Round 1 Start, Buy-In

        Console.WriteLine("Do you want to buy in at $10, $25, $50, or $100?");
        int buyInValue;

        while (true)
        {
            if (!int.TryParse(Console.ReadLine(), out buyInValue) || (buyInValue != 10 && buyInValue != 25 && buyInValue != 50 && buyInValue != 100))
            {
                Console.WriteLine("Invalid response. Please enter [10], [25], [50], or [100].");
            }
            else
            {
                break;
            }
        }

        int roundOutcome = 0;
        int bankRollAmount = buyInValue + -roundOutcome;

        Console.WriteLine($"Great! You've bought in at {buyInValue}. Your Bankroll is ${bankRollAmount}.");
        bool playAgain = true;

        //******************************************************************************
        // All continuous round start

        while (playAgain == true)
        {
            deck.Shuffle(new Random());
            playerHand.Clear();
            dealerHand.Clear();

            // Deal 2 new cards to player and dealer
            playerHand.Add(deck.DealCard());
            dealerHand.Add(deck.DealCard());
            playerHand.Add(deck.DealCard());
            dealerHand.Add(deck.DealCard());

            if (bankRollAmount <= 0)
            {
                Console.WriteLine("Sorry! You have bust out. Better luck next time!");
                return;
            }

            int playerTotal = CalculateHandValue(playerHand);
            int dealerTotal = CalculateHandValue(dealerHand);

            // Introduce betting mechanic
            // No decimals, need to test negative numbers

            int betValue;

            while (true)
            {
                Console.WriteLine("How much would you like to bet? Min ($1) Max ($10000)");
                if (!int.TryParse(Console.ReadLine(), out betValue) || betValue < 0 || betValue > 10000)
                {
                    Console.WriteLine("Invalid bet amount. Please enter an amount between $1.00 and $10000.");
                }
                else if (betValue > buyInValue)
                {
                    Console.WriteLine("You cannot bet more money than you have.. Try again.");
                }
                else
                {
                    break;
                }
            }

            Console.WriteLine($"You're betting ${betValue}. Good Luck, {playerName}!");
            Console.WriteLine("");
            Console.WriteLine($"Player's hand: {DisplayHand(playerHand, true)} ({playerTotal})");
            Console.WriteLine($"Dealer lays one card facedown. Dealer's face-up card: {DisplayCard(dealerHand[1])}");

            //******************************************************************************
            // Actual Gameplay

            while (playerTotal < 21)
            {
                Console.WriteLine("Do you want to hit [H] or stand [S]?");
                char choice = char.ToUpper(Console.ReadKey().KeyChar);

                if (choice == 'H' && playerTotal < 21)
                {
                    Card newCard = deck.DealCard();
                    playerHand.Add(newCard);
                    playerTotal = CalculateHandValue(playerHand);
                    Console.WriteLine($"\n{playerName} drew {DisplayCard(newCard)}");
                    Console.WriteLine($"Player's hand: {DisplayHand(playerHand, true)} ({playerTotal})");

                    if (dealerTotal < 17)
                    {
                        Card newCardDealer = deck.DealCard();
                        dealerHand.Add(newCardDealer);
                        dealerTotal = CalculateHandValue(dealerHand);
                        Console.WriteLine($"\nDealer has to hit. Dealer draws {DisplayCard(newCardDealer)}");
                        Console.WriteLine($"Dealer hand: FaceDown, {DisplayCard(dealerHand[1])}, {DisplayCard(newCard)}");
                        continue;
                    }
                    continue;
                }

                if (choice == 'S')
                {
                    Console.WriteLine($"\nYou Stand. {DisplayHand(playerHand, true)} ({playerTotal})");

                    while (dealerTotal <= 17) //"Hit on Soft 17, Stand on Hard 17" when implemented
                    {
                        Card newCard = deck.DealCard();
                        dealerHand.Add(newCard);
                        dealerTotal = CalculateHandValue(dealerHand);
                        Console.WriteLine($"\nDealer has to hit. Dealer draws {DisplayCard(newCard)}");
                        Console.WriteLine($"Dealer hand: FaceDown, {DisplayCard(dealerHand[1])}, {DisplayCard(newCard)}");
                    }
                    break;
                }

                else if (choice != 'H' && choice != 'S')
                {
                    Console.WriteLine("Invalid Response.\nPlease enter 'H' to Hit or 'S' to Stand.");
                    continue;
                }
            }

            //******************************************************************************
            // Round over, determine winner
            // Retrieve cards first

            DetermineWinner(playerTotal, dealerTotal);

            string DisplayHand(List<Card> hand, bool revealAll = false)
            {
                List<string> cardStrings = new();

                for (int i = 0; i < hand.Count; i++)
                {
                    if (i == 0 && !revealAll)
                    {
                        cardStrings.Add("Hidden");
                    }
                    else
                    {
                        cardStrings.Add(DisplayCard(hand[i]));
                    }
                }
                return string.Join(", ", cardStrings);
            }

            // Calculate hand value

            int CalculateHandValue(List<Card> hand)
            {
                int total = 0;
                int numAces = 0;

                foreach (var card in hand)
                {
                    if (Enum.TryParse(card.FaceValue, out FaceValue faceValue))
                    {
                        if (faceValue == FaceValue.Ace)
                        {
                            numAces++;
                            total += 11; // Assume Ace is 11 initially
                        }
                        else if (faceValue >= FaceValue.Two && faceValue <= FaceValue.Ten)
                        {
                            total += (int)faceValue;
                        }
                        else
                        {
                            total += 10; // Jack, Queen, and King are all worth 10
                        }
                    }
                }

                // Adjust the value of Aces if needed

                while (numAces > 0 && total > 21)
                {
                    total -= 10; // Change the value of one Ace from 11 to 1
                    numAces--;
                }
                return total;
            }

            string DisplayCard(Card card)
            {
                return $"{card.FaceValue} of {card.Suit}";
            }

            //******************************************************************************
            // Tell user outcome of round

            void DetermineWinner(int playerTotal, int dealerTotal)
            {
                if (playerTotal > 21)                                       //Player loses
                {
                    Console.WriteLine("Player busts! Dealer wins!");
                    bankRollAmount = bankRollAmount - betValue;
                    Console.WriteLine($"- ${betValue}\nBankroll: ${bankRollAmount}");
                }
                else if (dealerTotal > 21)                                  //Player wins
                {
                    Console.WriteLine($"Dealer busts! {playerName} wins!");
                    bankRollAmount = bankRollAmount + (betValue * 2);
                    Console.WriteLine($"+ ${betValue * 2}\nBankroll: ${bankRollAmount}");
                }
                else if (playerTotal == 21 && playerTotal != dealerTotal)    //Player wins
                {
                    Console.WriteLine($"{playerName} has Blackjack!");
                    bankRollAmount = bankRollAmount + (betValue * 2);
                    Console.WriteLine($"+ ${betValue * 2}\nBankroll: ${bankRollAmount}");
                }
                else if (dealerTotal == 21)                                 //Player loses
                {
                    Console.WriteLine("Dealer has Blackjack!");
                    bankRollAmount = bankRollAmount - betValue;
                    Console.WriteLine($"- ${betValue}\nBankroll: ${bankRollAmount}");
                    return;
                }
                else if (playerTotal > dealerTotal)                         //Player wins
                {
                    Console.WriteLine($"{playerName} wins!");
                    bankRollAmount = bankRollAmount + (betValue * 2);
                    Console.WriteLine($"+ ${betValue * 2}\nBankroll: ${bankRollAmount}");
                }
                else if (playerTotal < dealerTotal)                         //Player loses
                {
                    Console.WriteLine("Dealer wins!");
                    bankRollAmount = bankRollAmount - betValue;
                    Console.WriteLine($"- ${betValue}\nBankroll: ${bankRollAmount}");
                }
                else if (playerTotal == dealerTotal)
                {
                    Console.WriteLine("It's a tie!");                       // TIE
                    Console.WriteLine($"All bets returned. BankRoll : {bankRollAmount}");
                }
                else if (dealerTotal == 21)                                 //Player loses
                {
                    Console.WriteLine("Dealer has BlackJack! You lose!");
                    bankRollAmount = bankRollAmount - betValue;
                    Console.WriteLine($"- ${betValue}\nBankroll: ${bankRollAmount}");
                    return;
                }
            }

            //******************************************************************************
            // Can/Does user want to play another round?

            if (bankRollAmount > 0)
            {
                Console.WriteLine("Would you like to play another round? [Y] [N]");
                string anotherRound = Console.ReadLine();
                string anotherRoundUpper = anotherRound.ToUpper();

                bool playAnotherRound = anotherRoundUpper == "Y";

                if (playAnotherRound == true)
                {
                    playAgain = true;
                    continue;
                }
                if (playAnotherRound != true && playAnotherRound)
                {
                    Console.WriteLine("Invalid Response. Please enter [Y] to play another round or [N] to quit the game.");
                }
                if (playAnotherRound == false)
                {
                    Console.WriteLine("Okay, see ya again next time!");
                    break;
                }
                if (bankRollAmount <= 0)
                {
                    Console.WriteLine($"Sorry, you have busted out of the game. You are at {bankRollAmount}. Better luck next time!");
                    break;
                }
            }
        }
    }







    //Class
    public class Deck
    {
        public List<Card> Cards { get; set; }

        public Deck()
        {
            Cards = new List<Card>();
            foreach (Suit suit in Enum.GetValues(typeof(Suit)))
            {
                foreach (FaceValue faceValue in Enum.GetValues(typeof(FaceValue)))
                {
                    Cards.Add(new Card { Suit = suit.ToString(), FaceValue = faceValue.ToString() });
                }
            }
        }

        //Method
        public void Shuffle(Random rng)
        {
            //Random rng = new Random();
            int n = Cards.Count;
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                Card value = Cards[k];
                Cards[k] = Cards[n];
                Cards[n] = value;
            }
        }

        //Method
        public Card DealCard()
        {
            Card card = Cards[0];
            Cards.RemoveAt(0);
            return card;
        }
    }

    //Class
    public class Card
    {
        public string? Suit { get; set; }
        public string? FaceValue { get; set; }
    }

    //Enum Class
    public enum FaceValue
    {
        Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten,
        Jack, Queen, King, Ace
    }

    //Enum Class
    public enum Suit
    {
        Hearts,
        Diamonds,
        Clubs,
        Spades
    }
*@